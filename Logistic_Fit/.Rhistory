library(growthcurver);
library(tidyverse);
library(readxl);
library(knitr)
mytheme = theme(axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
strip.text.x = element_text(size = 8),
legend.position = "none",
aspect.ratio =1,
panel.grid.minor=element_blank(), panel.grid.major=element_blank());
# load my growth data
datafile = "/home/tolonen/Github/actolonen/Microbial_Growth/Growthcurver/2024.02.29_growthData.xlsx";
growthdata = read_excel(datafile, sheet = "Data", col_names = TRUE, skip=0);
library(growthcurver);
library(tidyverse);
library(readxl);
library(knitr)
mytheme = theme(axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
strip.text.x = element_text(size = 8),
legend.position = "none",
aspect.ratio =1,
panel.grid.minor=element_blank(), panel.grid.major=element_blank());
# load my growth data
datafile = "/home/tolonen/Github/actolonen/Public/Microbial_Growth/Logistic_Fit/2024.02.29_growthData.xlsx";
growthdata = read_excel(datafile, sheet = "Data", col_names = TRUE, skip=0);
growthdata = growthdata %>%
rename(time = Hours) %>% # time col must be called "time"
mutate_if(is.character, as.numeric); # make all data numeric
table1 = kable(growthdata[1:5, 1:10], caption = "Format of input growth data for growthcurver fit. Columns are time (hours) and OD600 of each well");
table1
# convert growth data to tidy format
growthdatalong = growthdata %>%
pivot_longer(cols = A01:F12, names_to = "Well", values_to = "OD600");
View(growthdatalong)
str(growthdatalong)
names(growthdatalong)
d = growthdatalong %>%
rename(t = time, n = OD600);
View(d)
d = growthdatalong %>%
rename(t = time, n = OD600) %>%
select(-Well);
d = growthdatalong %>%
rename(t = time, n = OD600);
d = d %>%
group_by(Well) %>%
mutate(k_init = max(n)) %>%
mutate(n0_init = min(n));
library(growthcurver);
library(tidyverse);
library(readxl);
library(knitr);
library(stats);
mytheme = theme(axis.text.x = element_text(size = 4),
axis.text.y = element_text(size = 4),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12),
strip.text.x = element_text(size = 8),
legend.position = "none",
aspect.ratio =1,
panel.grid.minor=element_blank(), panel.grid.major=element_blank());
# load my growth data
datafile = "/home/tolonen/Github/actolonen/Public/Microbial_Growth/Logistic_Fit/2024.02.29_growthData.xlsx";
growthdata = read_excel(datafile, sheet = "Data", col_names = TRUE, skip=0);
growthdata = growthdata %>%
rename(time = Hours) %>% # time col must be called "time"
mutate_if(is.character, as.numeric); # make all data numeric
table1 = kable(growthdata[1:5, 1:10], caption = "Format of input growth data for growthcurver fit. Columns are time (hours) and OD600 of each well");
table1
# convert growth data to tidy format
growthdatalong = growthdata %>%
pivot_longer(cols = A01:F12, names_to = "Well", values_to = "OD600");
# note: time and growth data must be numeric and the same length
d = growthdatalong %>%
rename(t = time, n = OD600);
# make some guesses for the initial parameter values
d = d %>%
group_by(Well) %>%
mutate(k_init = max(n)) %>%
mutate(n0_init = min(n));
# make an initial estimate for r
d = d %>%
group_by(Well) %>%
mutate(glm_mod = stats::glm(n / k_init ~ t, family = stats::quasibinomial("logit"), data = d)) %>%
mutate(r_init = stats::coef(glm_mod)[[2]]);
d = growthdatalong %>%
rename(t = time, n = OD600);
# make some guesses for the initial parameter values
d = d %>%
group_by(Well) %>%
mutate(k_init = max(n)) %>%
mutate(n0_init = min(n));
# make an initial estimate for r
d = d %>%
group_by(Well) %>%
mutate(glm_mod = stats::glm(n / k_init ~ t, family = stats::quasibinomial("logit"), data = d)) %>%
mutate(r_init = stats::coef(glm_mod)[[2]]);
d = d %>%
group_by(Well) %>%
mutate(glm_mod = stats::glm(n / k_init ~ t, family = stats::quasibinomial("logit"), data = d))
d = d %>%
filter(Well == "A05");
View(d)
d = growthdatalong %>%
rename(t = time, n = OD600);
# make some guesses for the initial parameter values
# d = d %>%
#   group_by(Well) %>%
#   mutate(k_init = max(n)) %>%
#   mutate(n0_init = min(n));
d = d %>%
filter(Well == "A05") %>%
select(-Well);
k_init = max(d$n);
n0_init = min(d$n);
k_init
d = d %>%
filter(Well == "A05") %>%
select(-Well);
d = d %>%
filter(Well == "A05") %>%
select(-Well);
d = d %>%
filter(Well == "A05")
d = d %>%
filter(Well == "A05");
d = growthdatalong %>%
rename(t = time, n = OD600);
# make some guesses for the initial parameter values
# d = d %>%
#   group_by(Well) %>%
#   mutate(k_init = max(n)) %>%
#   mutate(n0_init = min(n));
d = d %>%
filter(Well == "A05");
d = growthdatalong %>%
rename(t = time, n = OD600);
# make some guesses for the initial parameter values
# d = d %>%
#   group_by(Well) %>%
#   mutate(k_init = max(n)) %>%
#   mutate(n0_init = min(n));
d = d %>%
filter(Well == "A05") %>%
select(-Well);
k_init = max(d$n);
n0_init = min(d$n);
glm_mod = stats::glm(n / k_init ~ t,
family = stats::quasibinomial("logit"),
data = d);
glm_mod
str(glm_mod)
